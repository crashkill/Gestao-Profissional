#!/bin/bash
# üîÑ Script de Migra√ß√£o B√°sica: Produ√ß√£o ‚Üí Homologa√ß√£o
# Este script replica os dados b√°sicos usando apenas chaves an√¥nimas

set -e  # Parar em caso de erro

# üéØ Configura√ß√µes dos Projetos
PROD_PROJECT_ID="pwksgdjjkryqryqrvyja"
HOMOLOG_PROJECT_ID="zbiivgtdamejiwcabmcv"
PROD_URL="https://pwksgdjjkryqryqrvyja.supabase.co"
HOMOLOG_URL="https://zbiivgtdamejiwcabmcv.supabase.co"

# üîê Chaves An√¥nimas (do Doppler)
PROD_ANON_KEY="YOUR_PRODUCTION_ANON_KEY_HERE"
HOMOLOG_ANON_KEY="YOUR_HOMOLOG_ANON_KEY_HERE"

# üìÅ Arquivo tempor√°rio para dados
TEMP_DATA_FILE="/tmp/colaboradores_backup.json"

echo "üöÄ Iniciando Migra√ß√£o B√°sica: Produ√ß√£o ‚Üí Homologa√ß√£o"
echo "========================================================"
echo "üìä Produ√ß√£o:   $PROD_PROJECT_ID"
echo "üß™ Homologa√ß√£o: $HOMOLOG_PROJECT_ID"
echo "========================================================"

# üîç Verificar conectividade
echo "üîç Verificando conectividade..."

# Testar produ√ß√£o
echo "üìä Testando conex√£o com PRODU√á√ÉO..."
PROD_TEST=$(curl -s -o /dev/null -w "%{http_code}" \
  "$PROD_URL/rest/v1/colaboradores?select=count" \
  -H "apikey: $PROD_ANON_KEY" \
  -H "Authorization: Bearer $PROD_ANON_KEY")

if [ "$PROD_TEST" != "200" ]; then
  echo "‚ùå ERRO: N√£o foi poss√≠vel conectar √† PRODU√á√ÉO (HTTP $PROD_TEST)"
  exit 1
fi
echo "‚úÖ Conex√£o com PRODU√á√ÉO: OK"

# Testar homologa√ß√£o
echo "üß™ Testando conex√£o com HOMOLOGA√á√ÉO..."
HOMOLOG_TEST=$(curl -s -o /dev/null -w "%{http_code}" \
  "$HOMOLOG_URL/rest/v1/colaboradores?select=count" \
  -H "apikey: $HOMOLOG_ANON_KEY" \
  -H "Authorization: Bearer $HOMOLOG_ANON_KEY")

if [ "$HOMOLOG_TEST" != "200" ]; then
  echo "‚ùå ERRO: N√£o foi poss√≠vel conectar √† HOMOLOGA√á√ÉO (HTTP $HOMOLOG_TEST)"
  exit 1
fi
echo "‚úÖ Conex√£o com HOMOLOGA√á√ÉO: OK"

# üìä Verificar dados em produ√ß√£o
echo "üìä Verificando dados em PRODU√á√ÉO..."
PROD_COUNT=$(curl -s \
  "$PROD_URL/rest/v1/colaboradores?select=count" \
  -H "apikey: $PROD_ANON_KEY" \
  -H "Authorization: Bearer $PROD_ANON_KEY" | \
  jq -r '.[0].count // 0')

echo "üìà Registros em PRODU√á√ÉO: $PROD_COUNT"

if [ "$PROD_COUNT" = "0" ] || [ "$PROD_COUNT" = "null" ]; then
  echo "‚ö†Ô∏è AVISO: Nenhum dado encontrado em PRODU√á√ÉO"
  echo "üîç Verificando se a tabela existe..."
  
  # Tentar listar colunas da tabela
  PROD_SCHEMA=$(curl -s \
    "$PROD_URL/rest/v1/colaboradores?select=*&limit=0" \
    -H "apikey: $PROD_ANON_KEY" \
    -H "Authorization: Bearer $PROD_ANON_KEY")
  
  if echo "$PROD_SCHEMA" | jq -e '. | length' > /dev/null 2>&1; then
    echo "‚úÖ Tabela existe em PRODU√á√ÉO, mas est√° vazia"
  else
    echo "‚ùå ERRO: Tabela n√£o existe ou n√£o √© acess√≠vel em PRODU√á√ÉO"
    exit 1
  fi
fi

# üì• Baixar dados de produ√ß√£o
echo "üì• Baixando dados de PRODU√á√ÉO..."
curl -s \
  "$PROD_URL/rest/v1/colaboradores?select=*" \
  -H "apikey: $PROD_ANON_KEY" \
  -H "Authorization: Bearer $PROD_ANON_KEY" \
  > "$TEMP_DATA_FILE"

# Verificar se o download foi bem-sucedido
if [ ! -s "$TEMP_DATA_FILE" ]; then
  echo "‚ùå ERRO: Falha ao baixar dados de PRODU√á√ÉO"
  exit 1
fi

DOWNLOADED_COUNT=$(jq '. | length' "$TEMP_DATA_FILE")
echo "‚úÖ Baixados $DOWNLOADED_COUNT registros de PRODU√á√ÉO"

# üß™ Verificar dados em homologa√ß√£o
echo "üß™ Verificando dados em HOMOLOGA√á√ÉO..."
HOMOLOG_COUNT=$(curl -s \
  "$HOMOLOG_URL/rest/v1/colaboradores?select=count" \
  -H "apikey: $HOMOLOG_ANON_KEY" \
  -H "Authorization: Bearer $HOMOLOG_ANON_KEY" | \
  jq -r '.[0].count // 0')

echo "üìà Registros atuais em HOMOLOGA√á√ÉO: $HOMOLOG_COUNT"

# üóëÔ∏è Limpar dados de homologa√ß√£o (se houver)
if [ "$HOMOLOG_COUNT" != "0" ] && [ "$HOMOLOG_COUNT" != "null" ]; then
  echo "üóëÔ∏è Limpando dados existentes em HOMOLOGA√á√ÉO..."
  
  # Nota: Com chave an√¥nima, s√≥ podemos deletar se as pol√≠ticas RLS permitirem
  # Vamos tentar deletar todos os registros
  DELETE_RESULT=$(curl -s -X DELETE \
    "$HOMOLOG_URL/rest/v1/colaboradores?id=gte.0" \
    -H "apikey: $HOMOLOG_ANON_KEY" \
    -H "Authorization: Bearer $HOMOLOG_ANON_KEY" \
    -H "Prefer: return=minimal")
  
  # Verificar se a limpeza funcionou
  NEW_COUNT=$(curl -s \
    "$HOMOLOG_URL/rest/v1/colaboradores?select=count" \
    -H "apikey: $HOMOLOG_ANON_KEY" \
    -H "Authorization: Bearer $HOMOLOG_ANON_KEY" | \
    jq -r '.[0].count // 0')
  
  if [ "$NEW_COUNT" = "0" ]; then
    echo "‚úÖ Dados limpos com sucesso"
  else
    echo "‚ö†Ô∏è AVISO: N√£o foi poss√≠vel limpar todos os dados ($NEW_COUNT restantes)"
    echo "üí° Isso pode ser devido √†s pol√≠ticas RLS. Continuando..."
  fi
fi

# üì§ Enviar dados para homologa√ß√£o
if [ "$DOWNLOADED_COUNT" -gt 0 ]; then
  echo "üì§ Enviando dados para HOMOLOGA√á√ÉO..."
  
  # Remover campos que podem causar conflito (id, created_at)
  jq 'map(del(.id, .created_at))' "$TEMP_DATA_FILE" > "${TEMP_DATA_FILE}.clean"
  
  # Enviar dados em lotes (para evitar timeout)
  BATCH_SIZE=50
  TOTAL_RECORDS=$(jq '. | length' "${TEMP_DATA_FILE}.clean")
  BATCHES=$(( (TOTAL_RECORDS + BATCH_SIZE - 1) / BATCH_SIZE ))
  
  echo "üì¶ Enviando $TOTAL_RECORDS registros em $BATCHES lotes..."
  
  for ((i=0; i<BATCHES; i++)); do
    START=$((i * BATCH_SIZE))
    echo "üì¶ Lote $((i+1))/$BATCHES (registros $((START+1))-$((START+BATCH_SIZE)))..."
    
    # Extrair lote
    jq ".[${START}:${START}+${BATCH_SIZE}]" "${TEMP_DATA_FILE}.clean" > "${TEMP_DATA_FILE}.batch"
    
    # Enviar lote
    UPLOAD_RESULT=$(curl -s -X POST \
      "$HOMOLOG_URL/rest/v1/colaboradores" \
      -H "apikey: $HOMOLOG_ANON_KEY" \
      -H "Authorization: Bearer $HOMOLOG_ANON_KEY" \
      -H "Content-Type: application/json" \
      -H "Prefer: return=minimal" \
      -d @"${TEMP_DATA_FILE}.batch")
    
    # Verificar se houve erro
    if echo "$UPLOAD_RESULT" | jq -e '.code' > /dev/null 2>&1; then
      echo "‚ùå ERRO no lote $((i+1)): $UPLOAD_RESULT"
    else
      echo "‚úÖ Lote $((i+1)) enviado com sucesso"
    fi
    
    # Pequena pausa entre lotes
    sleep 1
  done
  
  # Limpar arquivos tempor√°rios
  rm -f "${TEMP_DATA_FILE}.clean" "${TEMP_DATA_FILE}.batch"
else
  echo "‚ö†Ô∏è Nenhum dado para migrar"
fi

# üîç Verificar resultado final
echo "üîç Verificando resultado da migra√ß√£o..."
FINAL_COUNT=$(curl -s \
  "$HOMOLOG_URL/rest/v1/colaboradores?select=count" \
  -H "apikey: $HOMOLOG_ANON_KEY" \
  -H "Authorization: Bearer $HOMOLOG_ANON_KEY" | \
  jq -r '.[0].count // 0')

echo "üìà Registros finais em HOMOLOGA√á√ÉO: $FINAL_COUNT"

# üßπ Limpar arquivo tempor√°rio
rm -f "$TEMP_DATA_FILE"

# üìä Resumo
echo ""
echo "üìä RESUMO DA MIGRA√á√ÉO"
echo "==================="
echo "üìä Produ√ß√£o:    $PROD_COUNT registros"
echo "üß™ Homologa√ß√£o: $FINAL_COUNT registros"

if [ "$FINAL_COUNT" -gt 0 ]; then
  echo "‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!"
  echo ""
  echo "üéØ Pr√≥ximos passos:"
  echo "1. Configurar ambiente de desenvolvimento para usar homologa√ß√£o:"
  echo "   doppler secrets set VITE_SUPABASE_URL=\"https://zbiivgtdamejiwcabmcv.supabase.co\""
  echo "   doppler secrets set VITE_SUPABASE_ANON_KEY=\"$HOMOLOG_ANON_KEY\""
  echo ""
  echo "2. Reiniciar a aplica√ß√£o:"
  echo "   doppler run -- npx vite"
  echo ""
  echo "3. Testar a aplica√ß√£o em http://localhost:5173/"
else
  echo "‚ö†Ô∏è MIGRA√á√ÉO INCOMPLETA"
  echo "üí° Verifique as pol√≠ticas RLS e permiss√µes"
fi

echo ""
echo "üèÅ Script finalizado!"