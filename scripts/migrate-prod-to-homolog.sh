#!/bin/bash
# üîÑ Script de Migra√ß√£o Completa: Produ√ß√£o ‚Üí Homologa√ß√£o
# Este script replica completamente o banco de produ√ß√£o para homologa√ß√£o

set -e  # Parar em caso de erro

# üéØ Configura√ß√µes dos Projetos
PROD_PROJECT_ID="pwksgdjjkryqryqrvyja"
HOMOLOG_PROJECT_ID="zbiivgtdamejiwcabmcv"
PROD_URL="https://pwksgdjjkryqryqrvyja.supabase.co"
HOMOLOG_URL="https://zbiivgtdamejiwcabmcv.supabase.co"

# üîê Chaves de Acesso (devem estar no Doppler)
PROD_SERVICE_KEY="${SUPABASE_PROD_SERVICE_KEY}"
HOMOLOG_SERVICE_KEY="${SUPABASE_HOMOLOG_SERVICE_KEY}"

echo "üöÄ Iniciando Migra√ß√£o Completa: Produ√ß√£o ‚Üí Homologa√ß√£o"
echo "========================================================"
echo "üìä Produ√ß√£o:   $PROD_PROJECT_ID"
echo "üß™ Homologa√ß√£o: $HOMOLOG_PROJECT_ID"
echo "========================================================"

# Verificar se as chaves est√£o configuradas
if [ -z "$PROD_SERVICE_KEY" ] || [ -z "$HOMOLOG_SERVICE_KEY" ]; then
    echo "‚ùå ERRO: Chaves de servi√ßo n√£o configuradas!"
    echo "Configure as vari√°veis:"
    echo "  - SUPABASE_PROD_SERVICE_KEY"
    echo "  - SUPABASE_HOMOLOG_SERVICE_KEY"
    exit 1
fi

# üìã Fun√ß√£o para executar SQL no Supabase
execute_sql() {
    local PROJECT_URL=$1
    local SERVICE_KEY=$2
    local SQL_QUERY=$3
    local DESCRIPTION=$4
    
    echo "üîß $DESCRIPTION..."
    
    curl -s -X POST "$PROJECT_URL/rest/v1/rpc/execute_sql" \
        -H "apikey: $SERVICE_KEY" \
        -H "Authorization: Bearer $SERVICE_KEY" \
        -H "Content-Type: application/json" \
        -d "{\"query\": \"$SQL_QUERY\"}"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ $DESCRIPTION conclu√≠do"
    else
        echo "‚ùå Erro em: $DESCRIPTION"
        exit 1
    fi
}

# üóëÔ∏è PASSO 1: Limpar banco de homologa√ß√£o
echo "\nüóëÔ∏è PASSO 1: Limpando banco de homologa√ß√£o..."

# Desabilitar RLS temporariamente
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "ALTER TABLE IF EXISTS colaboradores DISABLE ROW LEVEL SECURITY;" \
    "Desabilitando RLS"

# Remover dados existentes
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "TRUNCATE TABLE IF EXISTS colaboradores CASCADE;" \
    "Limpando dados existentes"

# Remover tabela se existir
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "DROP TABLE IF EXISTS colaboradores CASCADE;" \
    "Removendo tabela existente"

# üèóÔ∏è PASSO 2: Recriar estrutura
echo "\nüèóÔ∏è PASSO 2: Recriando estrutura da tabela..."

# Criar tabela colaboradores
CREATE_TABLE_SQL="
CREATE TABLE colaboradores (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  nome_completo TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  area_atuacao TEXT NOT NULL,
  skill_principal TEXT NOT NULL,
  nivel_experiencia TEXT NOT NULL,
  disponivel_compartilhamento BOOLEAN DEFAULT false,
  percentual_compartilhamento INTEGER DEFAULT 0,
  outras_skills TEXT[]
);"

execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "$CREATE_TABLE_SQL" \
    "Criando tabela colaboradores"

# üîí PASSO 3: Configurar seguran√ßa (RLS)
echo "\nüîí PASSO 3: Configurando seguran√ßa (RLS)..."

# Habilitar RLS
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "ALTER TABLE colaboradores ENABLE ROW LEVEL SECURITY;" \
    "Habilitando RLS"

# Pol√≠tica de leitura
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "CREATE POLICY \"Enable read access for all users\" ON colaboradores FOR SELECT USING (true);" \
    "Criando pol√≠tica de leitura"

# Pol√≠tica de inser√ß√£o
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "CREATE POLICY \"Enable insert for all users\" ON colaboradores FOR INSERT WITH CHECK (true);" \
    "Criando pol√≠tica de inser√ß√£o"

# Pol√≠tica de atualiza√ß√£o
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "CREATE POLICY \"Enable update for all users\" ON colaboradores FOR UPDATE USING (true);" \
    "Criando pol√≠tica de atualiza√ß√£o"

# Pol√≠tica de exclus√£o
execute_sql "$HOMOLOG_URL" "$HOMOLOG_SERVICE_KEY" \
    "CREATE POLICY \"Enable delete for all users\" ON colaboradores FOR DELETE USING (true);" \
    "Criando pol√≠tica de exclus√£o"

# üìä PASSO 4: Migrar dados
echo "\nüìä PASSO 4: Migrando dados de produ√ß√£o..."

# Obter dados de produ√ß√£o
echo "üîç Obtendo dados de produ√ß√£o..."
PROD_DATA=$(curl -s "$PROD_URL/rest/v1/colaboradores?select=*" \
    -H "apikey: $PROD_SERVICE_KEY" \
    -H "Authorization: Bearer $PROD_SERVICE_KEY")

if [ "$PROD_DATA" = "[]" ] || [ -z "$PROD_DATA" ]; then
    echo "‚ö†Ô∏è Nenhum dado encontrado em produ√ß√£o ou erro na consulta"
else
    echo "‚úÖ Dados obtidos de produ√ß√£o"
    
    # Inserir dados em homologa√ß√£o
    echo "üì• Inserindo dados em homologa√ß√£o..."
    curl -s -X POST "$HOMOLOG_URL/rest/v1/colaboradores" \
        -H "apikey: $HOMOLOG_SERVICE_KEY" \
        -H "Authorization: Bearer $HOMOLOG_SERVICE_KEY" \
        -H "Content-Type: application/json" \
        -H "Prefer: return=minimal" \
        -d "$PROD_DATA"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Dados migrados com sucesso"
    else
        echo "‚ùå Erro ao migrar dados"
        exit 1
    fi
fi

# üß™ PASSO 5: Verificar migra√ß√£o
echo "\nüß™ PASSO 5: Verificando migra√ß√£o..."

# Contar registros em produ√ß√£o
PROD_COUNT=$(curl -s "$PROD_URL/rest/v1/colaboradores?select=count" \
    -H "apikey: $PROD_SERVICE_KEY" \
    -H "Authorization: Bearer $PROD_SERVICE_KEY" | jq -r '.[0].count // 0')

# Contar registros em homologa√ß√£o
HOMOLOG_COUNT=$(curl -s "$HOMOLOG_URL/rest/v1/colaboradores?select=count" \
    -H "apikey: $HOMOLOG_SERVICE_KEY" \
    -H "Authorization: Bearer $HOMOLOG_SERVICE_KEY" | jq -r '.[0].count // 0')

echo "üìä Registros em Produ√ß√£o: $PROD_COUNT"
echo "üìä Registros em Homologa√ß√£o: $HOMOLOG_COUNT"

if [ "$PROD_COUNT" = "$HOMOLOG_COUNT" ]; then
    echo "‚úÖ Migra√ß√£o verificada com sucesso!"
else
    echo "‚ö†Ô∏è Diferen√ßa na quantidade de registros detectada"
fi

echo "\nüéâ Migra√ß√£o Completa Finalizada!"
echo "========================================================"
echo "‚úÖ Estrutura replicada"
echo "‚úÖ Pol√≠ticas de seguran√ßa configuradas"
echo "‚úÖ Dados migrados"
echo "‚úÖ Verifica√ß√£o conclu√≠da"
echo "========================================================"
echo "üîó Homologa√ß√£o: $HOMOLOG_URL"
echo "üìä Dashboard: https://supabase.com/dashboard/project/$HOMOLOG_PROJECT_ID"