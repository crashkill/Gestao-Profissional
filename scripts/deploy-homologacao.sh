#!/bin/bash

# üöÄ Script de Deploy para Homologa√ß√£o - Talent Sphere Registry
# Data: $(date)
# Desenvolvedor: Fabr√≠cio Lima

set -e  # Parar em caso de erro

echo "üöÄ INICIANDO DEPLOY DE HOMOLOGA√á√ÉO..."
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script na raiz do projeto!${NC}"
    exit 1
fi

# Verificar se Doppler est√° configurado
echo -e "${BLUE}üîß Verificando configura√ß√£o Doppler...${NC}"
if ! command -v doppler &> /dev/null; then
    echo -e "${RED}‚ùå Doppler CLI n√£o encontrado! Instale com: brew install dopplerhq/cli/doppler${NC}"
    exit 1
fi

# Verificar se o projeto existe no Doppler
if ! doppler configs --project talent-sphere-registry &> /dev/null; then
    echo -e "${RED}‚ùå Projeto 'talent-sphere-registry' n√£o encontrado no Doppler!${NC}"
    exit 1
fi

# Verificar se a configura√ß√£o de homologa√ß√£o existe
echo -e "${BLUE}üîß Verificando configura√ß√£o de homologa√ß√£o...${NC}"
if ! doppler configs get stg_homologacao --project talent-sphere-registry &> /dev/null; then
    echo -e "${RED}‚ùå Configura√ß√£o 'stg_homologacao' n√£o encontrada!${NC}"
    exit 1
fi

# Backup da configura√ß√£o atual (se existir)
echo -e "${BLUE}üíæ Fazendo backup das configura√ß√µes...${NC}"
if [ -f ".env.backup" ]; then
    cp .env.backup .env.backup.$(date +%Y%m%d_%H%M%S)
fi
if [ -f ".env" ]; then
    cp .env .env.backup
fi

# Limpeza de cache e node_modules (opcional)
read -p "üßπ Deseja limpar cache e reinstalar depend√™ncias? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}üßπ Limpando cache...${NC}"
    npm cache clean --force
    rm -rf node_modules package-lock.json
    npm install
fi

# Build para homologa√ß√£o
echo -e "${BLUE}üî® Fazendo build para homologa√ß√£o...${NC}"
doppler run --project talent-sphere-registry --config stg_homologacao -- npm run build:homologacao

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build conclu√≠do com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Erro no build!${NC}"
    exit 1
fi

# Verificar se o Supabase est√° acess√≠vel
echo -e "${BLUE}üîó Testando conectividade com Supabase...${NC}"
SUPABASE_URL=$(doppler secrets get VITE_SUPABASE_URL --project talent-sphere-registry --config stg_homologacao --plain)
if curl -s "$SUPABASE_URL/rest/v1/" > /dev/null; then
    echo -e "${GREEN}‚úÖ Supabase acess√≠vel!${NC}"
else
    echo -e "${RED}‚ùå Erro: N√£o foi poss√≠vel acessar o Supabase!${NC}"
    exit 1
fi

# Executar testes b√°sicos (se existirem)
if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
    echo -e "${BLUE}üß™ Executando testes...${NC}"
    doppler run --project talent-sphere-registry --config stg_homologacao -- npm test 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Testes n√£o executados ou n√£o encontrados${NC}"
fi

# Verificar fun√ß√µes SQL
echo -e "${BLUE}üóÑÔ∏è Verificando fun√ß√µes SQL no banco...${NC}"
echo "Fun√ß√µes necess√°rias:"
echo "- get_skill_proficiency_distribution"
echo "- get_contract_types_count"
echo "- get_skill_distribution"
echo "- get_professionals_by_skill_and_proficiency"

# Deploy summary
echo -e "\n${GREEN}üéâ DEPLOY DE HOMOLOGA√á√ÉO CONCLU√çDO!${NC}"
echo "=================================="
echo -e "${BLUE}üìã Resumo do Deploy:${NC}"
echo "‚Ä¢ Ambiente: Homologa√ß√£o (stg_homologacao)"
echo "‚Ä¢ Build: ‚úÖ Conclu√≠do"
echo "‚Ä¢ Banco: ‚úÖ Conectado"
echo "‚Ä¢ Configura√ß√£o: ‚úÖ Doppler"
echo ""
echo -e "${BLUE}üåê Para executar:${NC}"
echo "npm run dev:homologacao"
echo ""
echo -e "${BLUE}üîó URLs de acesso:${NC}"
echo "‚Ä¢ Local: http://localhost:8082/talent-sphere-homologacao/"
echo "‚Ä¢ Network: http://$(hostname -I | awk '{print $1}'):8082/talent-sphere-homologacao/"
echo ""
echo -e "${BLUE}üìä Para verificar m√©tricas:${NC}"
echo "‚Ä¢ Dashboard: Acessar a URL acima"
echo "‚Ä¢ Logs: Verificar terminal durante execu√ß√£o"
echo "‚Ä¢ Banco: 15 profissionais, 69 skills, 4 fun√ß√µes"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è Pr√≥ximos passos:${NC}"
echo "1. Testar todas as funcionalidades"
echo "2. Validar gr√°ficos e m√©tricas"
echo "3. Confirmar busca de profissionais"
echo "4. Preparar para deploy em staging real"
echo ""
echo -e "${GREEN}‚ú® Deploy finalizado com sucesso!${NC}" 