#!/bin/bash

# ü¶ä Script de Setup GitLab - Gest√£o Profissional HITSS
# Este script automatiza a configura√ß√£o do projeto no GitLab

set -e

echo "ü¶ä Iniciando setup do GitLab para Gest√£o Profissional HITSS..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens coloridas
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar se git est√° instalado
if ! command -v git &> /dev/null; then
    print_error "Git n√£o est√° instalado!"
    exit 1
fi

print_status "Git encontrado"

# Verificar se estamos em um reposit√≥rio git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Este n√£o √© um reposit√≥rio Git!"
    exit 1
fi

print_status "Reposit√≥rio Git v√°lido"

# Solicitar URL do GitLab
echo ""
print_info "Configure a URL do GitLab da GlobalHitss:"
echo "Exemplo: https://gitlab.globalhitss.com/ti/gestao-profissional.git"
read -p "URL do GitLab: " GITLAB_URL

if [ -z "$GITLAB_URL" ]; then
    print_error "URL do GitLab √© obrigat√≥ria!"
    exit 1
fi

# Verificar se o remote gitlab j√° existe
if git remote | grep -q "^gitlab$"; then
    print_warning "Remote 'gitlab' j√° existe. Removendo..."
    git remote remove gitlab
fi

# Adicionar remote do GitLab
print_info "Adicionando remote do GitLab..."
git remote add gitlab "$GITLAB_URL"
print_status "Remote GitLab adicionado"

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    print_warning "H√° mudan√ßas n√£o commitadas. Fazendo commit..."
    git add .
    git commit -m "ü¶ä Setup GitLab: Adicionar configura√ß√£o CI/CD

- .gitlab-ci.yml: Pipeline completo com build, test e deploy
- gitlab-setup.sh: Script de configura√ß√£o automatizada
- GITLAB-SETUP.md: Documenta√ß√£o do GitLab

Configurado para GlobalHitss com:
‚úÖ Build automatizado
‚úÖ Deploy staging/produ√ß√£o
‚úÖ Cache otimizado
‚úÖ Relat√≥rios de depend√™ncias"
fi

# Push para GitLab
print_info "Fazendo push para o GitLab..."
if git push gitlab main; then
    print_status "Push realizado com sucesso!"
else
    print_error "Falha no push. Verifique:"
    echo "  1. URL do GitLab est√° correta"
    echo "  2. Voc√™ tem permiss√µes de escrita"
    echo "  3. O projeto existe no GitLab"
    echo ""
    echo "Para criar o projeto manualmente:"
    echo "  1. Acesse: https://gitlab.globalhitss.com"
    echo "  2. Clique em 'New Project'"
    echo "  3. Nome: 'Gest√£o Profissional'"
    echo "  4. Visibilidade: Private"
    echo "  5. Copie a URL e execute este script novamente"
    exit 1
fi

# Exibir informa√ß√µes finais
echo ""
print_status "üéâ Setup do GitLab conclu√≠do com sucesso!"
echo ""
print_info "Pr√≥ximos passos:"
echo "  1. Acesse o projeto no GitLab: ${GITLAB_URL%%.git}"
echo "  2. Configure as vari√°veis de ambiente em Settings > CI/CD > Variables:"
echo "     - VITE_SUPABASE_URL"
echo "     - VITE_SUPABASE_ANON_KEY"
echo "     - DOPPLER_TOKEN (opcional)"
echo ""
echo "  3. A pipeline ser√° executada automaticamente nos pr√≥ximos commits"
echo "  4. Deploy manual dispon√≠vel para staging e produ√ß√£o"
echo ""
print_status "Documenta√ß√£o completa em: GITLAB-SETUP.md"

# Exibir remotes configurados
echo ""
print_info "Remotes configurados:"
git remote -v

echo ""
print_status "‚ú® Projeto pronto para desenvolvimento colaborativo!" 